#!/usr/bin/ruby
require 'yaml'
require ::File.expand_path("../../lib/generators/generator.rb", __FILE__)
require ::File.expand_path("../../lib/generators/generate_app_directory.rb", __FILE__)
require ::File.expand_path("../../lib/webit.rb", __FILE__)
module CreateApplication
  include Generator
  def self.error_msg(keys)
    path_error_yml = File.expand_path("../../lib/webit/error.yml", __FILE__)
    config_error = YAML.load_file("#{path_error_yml}")
    keys.split(".").inject(config_error) { |config_error, key| config_error[key] }
  end

  def self.identify_commandline_arguement
    action = ARGV[0]
    case action
      when "new"
        CreateApplication.create_app
      when "g" || "generate"
        CreateApplication.create_model_controller
      when "start"
        CreateApplication.start_server
      else
       puts "Webit Version v-0.0.1"
    end
  end

  def self.create_app
    check_app = ARGV[1]
    app_name = ARGV[2]
    if check_app.eql? "app"
      if app_name.nil?
        puts "Application Name is missing\n USAGE - webit new app APP_NAME\n"
      else
        GenerateAppDirectory.generate app_name
      end
    else
      puts "Application Name not specified\n USAGE - webit new app APP_NAME\n"
    end
  end

  def self.create_model_controller
    constant = ["model","controller"]
    action = ARGV[1]
    action_name = ARGV[2]
    arguement_array = ARGV
    if action.nil?
      puts CreateApplication.error_msg("error.model_control_error")
    else
      type = action.downcase
    end
    if constant.include?(type)
      if type.eql? ("model")
        if action_name.nil?
          puts CreateApplication.error_msg("error.model_error.perror")
          puts CreateApplication.error_msg("error.model_error.usage")
        else
          Base.new.generating_model_controller arguement_array
        end
      end
      if type.eql? ("controller")
        if action_name.nil?
          puts CreateApplication.error_msg("error.controller_error.perror")
          puts CreateApplication.error_msg("error.controller_error.usage")
        else
          Base.new.generating_model_controller arguement_array
        end
      end
    else
      puts CreateApplication.error_msg("error.model_control_error")
    end
  end

  def self.start_server
    action = ARGV[1]
    if constant.include?(action)
      begin
        system "rackup config.ru"
      rescue
        puts "\nPlease run this command from root directory of your Application to start server!\n"
      end
    else
      puts "Server missing"
    end
  end
end
CreateApplication.identify_commandline_arguement